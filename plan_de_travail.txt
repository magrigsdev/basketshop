
👍 

---

## 📌 Plan de travail pour la branche `insert-data`

### 🔹 Tâche 1 : Gestion des **Users**

➡️ Objectif : insertion des données utilisateurs

* **Sous-tâche 1.1** : Écrire un **test unitaire** pour vérifier l’insertion d’un `User` en BDD.👍
* **Sous-tâche 1.2** : Implémenter la fonction `createUser()` (insertion réelle).
* **Sous-tâche 1.3** : Vérifier que les données sont bien persistées et récupérables en BDD.

---

### 🔹 Tâche 2 : **Connexion utilisateur**

➡️ Objectif : permettre à un `User` de se connecter

* **Sous-tâche 2.1** : Écrire un **test fonctionnel** qui simule une connexion avec des credentials valides.
* **Sous-tâche 2.2** : Écrire un **test fonctionnel** qui simule une connexion avec des credentials invalides.
* **Sous-tâche 2.3** : Implémenter la connexion réelle (formulaire + configuration `security.yaml`).
* **Sous-tâche 2.4** : Vérifier que la connexion fonctionne en conditions réelles (navigateur ou Postman).

---

### 🔹 Tâche 3 : **Déconnexion utilisateur**

➡️ Objectif : permettre à un `User` de se déconnecter

* **Sous-tâche 3.1** : Écrire un **test fonctionnel** pour s’assurer qu’un utilisateur connecté peut se déconnecter.
* **Sous-tâche 3.2** : Implémenter la déconnexion réelle (route `/logout`).
* **Sous-tâche 3.3** : Vérifier en conditions réelles que la déconnexion renvoie bien vers `/login`.

---

### 🔹 Tâche 4 : Validation finale

* **Sous-tâche 4.1** : Relancer **toute la suite de tests PHPUnit** (`php bin/phpunit --testdox --colors=always`).
* **Sous-tâche 4.2** : Vérifier le fonctionnement complet (insertion → connexion → déconnexion) dans le navigateur.

